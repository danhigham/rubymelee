// Generated by CoffeeScript 1.3.3
(function() {
  var MeleeClient,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MeleeClient = (function() {

    function MeleeClient(guid, client_guid, mirror) {
      this.post_content = __bind(this.post_content, this);

      this.do_sync = __bind(this.do_sync, this);

      var _this = this;
      this.guid = guid;
      this.client_guid = client_guid;
      this.mirror = mirror;
      this.has_control = false;
      this.postTimeout = null;
      if (Faye.Client != null) {
        this.faye_client = new Faye.Client('http://localhost:8000/melee');
        this.faye_client.subscribe("/" + guid + "/sync", function(data) {
          if (data.sender !== _this.client_guid) {
            return _this.sync(data.body);
          }
        });
        this.faye_client.subscribe("/" + guid + "/update", function(data) {
          return _this.update(data);
        });
      }
      mirror.on('change', this.do_sync);
    }

    MeleeClient.prototype.do_sync = function(mirror, change) {
      this.faye_client.publish("/" + this.guid + "/sync", {
        body: JSON.stringify(change),
        sender: this.client_guid
      });
      if (this.postTimeout != null) {
        clearTimeout(this.postTimeout);
      }
      return this.postTimeout = setTimeout(this.post_content, 2000);
    };

    MeleeClient.prototype.release_control = function() {
      return this.has_control = false;
    };

    MeleeClient.prototype.update = function(data) {
      var msg, pos;
      msg = JSON.parse(data);
      this.mirror.off('change', this.do_sync);
      pos = this.mirror.getCursor();
      this.mirror.setValue(msg.content);
      $('#output pre').html(msg.output);
      this.mirror.setCursor(pos);
      return this.mirror.on('change', this.do_sync);
    };

    MeleeClient.prototype.sync = function(message) {
      var msg;
      msg = JSON.parse(message);
      this.mirror.off('change', this.do_sync);
      this.mirror.replaceRange(msg.text, msg.to, msg.from);
      if (msg.next != null) {
        this.mirror.replaceRange(msg.next.text, msg.next.to, msg.next.from);
      }
      return this.mirror.on('change', this.do_sync);
    };

    MeleeClient.prototype.post_content = function() {
      var data, melee_url;
      melee_url = "/melee/" + this.guid;
      data = {
        content: this.mirror.getValue()
      };
      return $.post(melee_url, data, function(return_data, status, jq_xhr) {
        return $('#output pre').html(return_data.output);
      });
    };

    return MeleeClient;

  })();

  window.MeleeClient = MeleeClient;

}).call(this);
